# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2VTGmkkvWykfV_w-148JJ16hykEfXuF
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import pickle

df = pd.read_csv(r"/content/drive/MyDrive/accidents_2017_to_2023_english.csv")

df = df.dropna()

df = df.drop(columns = ['week_day', 'hour', 'state', 'road_id', 'km','slightly_injured', 'severely_injured','latitude',
       'longitude', 'regional'],axis = 1)

df['people'] = df['people'] - df['ignored']

df = df.drop(columns = ['ignored'],axis = 1)

df['inverse_data'] = pd.to_datetime(df['inverse_data'])

df['month'] = df['inverse_data'].dt.month

df = df.drop(columns = ['inverse_data'], axis = 1)

month_enc = {1:"JAN",2:"FEB",3:"MAR",4:"APR",5:"MAY",6:"JUN",7:"JUL",8:"AUG",9:"SEP",10:"OCT",11:"NOV",12:"DEC"}

df['month'] = df['month'].replace(month_enc)

df_city_accident_count = df['city'].value_counts().reset_index()
df_city_accident_count.columns = ['city', 'Count']

records_city = df_city_accident_count['Count'][0:75].sum()

top_75_cities = df_city_accident_count['city'][0:75].tolist()

df_new= df[df['city'].isin(top_75_cities)]

accident_count = df_new['type_of_accident'].value_counts().reset_index()
accident_count.columns = ['type_of_accident', 'Count']

records_accident = accident_count['Count'][0:5].sum()

top_5_accidents = accident_count['type_of_accident'][0:5].tolist()

df_final = df_new[df_new['type_of_accident'].isin(top_5_accidents)]

df_exp = df_final.reset_index()

df_exp = df_exp.drop(columns = ['index'], axis = 1)

X = df_exp.drop(columns = ['type_of_accident'], axis = 1)
y = df_exp['type_of_accident']

X.info()

X.columns

cate_X = ['city', 'cause_of_accident', 'victims_condition', 'weather_timestamp',
       'road_direction', 'wheather_condition', 'road_type', 'road_delineation',
       'police_station', 'month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=3134)

from catboost import CatBoostClassifier

cbc = CatBoostClassifier(random_state=7)

cbc.fit(X_train,y_train,cat_features=cate_X)

# y_pred = cbc.predict(X_test)

# from sklearn.metrics import classification_report

# print(classification_report(y_test,y_pred ))

pickle.dump(cbc, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))